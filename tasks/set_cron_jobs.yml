---
# tasks file for health_check
# note: use double interpolation via vars[] to lookup the list item as dict

- name: "Find cron job files"
  find:
    paths: /etc/cron.d
    patterns: 'hc_check*'
    recurse: no
    excludes: ''
  # save output, look for files.[].path entries later
  register: hc_get_cron
  tags: cron_jobs

- name: "Build desired state for cron"
  # compile a list of plugins that need to be scheduled
  set_fact:
    hc_ds_cron_plugins: "{{ hc_ds_cron_plugins | default([]) + [item] }}"
  loop: "{{ hc_plugins }}"
  when:
    - (hc_plugins is defined) and hc_plugins
    - (vars[item].scheduled is defined) and vars[item].scheduled | bool
    - (hc_core.installed is defined) and hc_core.installed | bool
  tags: cron_jobs

- name: "Set cron jobs (add/update)"
  vars:
      default_schedule: "{{ hc_scheduling.cron }}"
      plugin_schedule: "{{ vars[item].cron }}"
  ansible.builtin.template:
    src: "cron_job.j2"
    dest: "/etc/cron.d/{{ item }}"
  when:
    - (hc_plugins is defined) and hc_plugins
    - (hc_core.installed is defined) and hc_core.installed | bool
  loop: "{{ hc_ds_cron_plugins | default([]) | sort }}"
  tags: cron_jobs

- name: "Set cron jobs (remove)"
  file:
    state: absent
    path: "{{ item }}"
  # loop over resulting files from 'find' command (filter for short basename first)
  # map .path attribute here to avoid verbose hash output in the playbook run
  loop: "{{ hc_get_cron.files | map(attribute='path') | list }}"
  # check if entry exist in the list of configured plugins (hc_plugins)
  when:
    - (hc_get_cron.files is defined) and hc_get_cron.files
    - (item | basename) not in (hc_ds_cron_plugins | default([]) | list)
  tags: cron_jobs
